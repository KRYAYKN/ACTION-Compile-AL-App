name: Compile AL Application
description: Compile the AL application and test app in a BC container.

inputs:
  CONTAINERNAME:
    description: "The name of the Business Central container."
    required: true
  BC_USERNAME:
    description: "Business Central username."
    required: true
  BC_PASSWORD:
    description: "Business Central password."
    required: true
  Build_StagingDirectory:
    description: "Path to the build staging directory."
    required: true

runs:
  using: "composite"
  steps:
    - name: Compile Main App
      shell: pwsh
      run: |
        $RepoDir = Get-Location
        $password = ConvertTo-SecureString "${{ inputs.BC_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ("${{ inputs.BC_USERNAME }}", $password)

        Write-Host "Compiling App..."
        Compile-AppInBcContainer -appProjectFolder $RepoDir `
                                 -containerName "${{ inputs.CONTAINERNAME }}" `
                                 -credential $credential `
                                 -generateErrorLog `
                                 -GenerateReportLayout "Yes" `
                                 -ReportSuppressedDiagnostics `
                                 -EnableCodeCop `
                                 -EnablePerTenantExtensionCop `
                                 -EnableUICop `
                                 -enableExternalRulesets

        $App = Get-ChildItem -Path "$RepoDir/output" -Filter "*.app" | Select-Object -First 1
        New-Item -Path "${{ inputs.Build_StagingDirectory }}" -ItemType Directory -Force | Out-Null
        Copy-Item -Path $App.FullName -Destination (Join-Path "${{ inputs.Build_StagingDirectory }}" "SGBC.app") -Force

    - name: Publish App to Container
      shell: pwsh
      run: |
        $RepoDir = Get-Location
        $AppPath = Get-ChildItem -Path (Join-Path $RepoDir "Artifacts") -Filter "*.app" | Select-Object -First 1
        $password = ConvertTo-SecureString "${{ inputs.BC_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ("${{ inputs.BC_USERNAME }}", $password)

        Import-Module BcContainerHelper
        Publish-BcContainerApp -appFile $AppPath.FullName `
                               -containerName "${{ inputs.CONTAINERNAME }}" `
                               -credential $credential `
                               -sync `
                               -install `
                               -skipVerification

    - name: Run Unit Tests On Container
      shell: pwsh
      run: |
        $RepoDir = Get-Location
        $password = ConvertTo-SecureString "${{ inputs.BC_PASSWORD }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ("${{ inputs.BC_USERNAME }}", $password)
        $containerName = "${{ inputs.CONTAINERNAME }}"
        Import-Module BcContainerHelper

        $xunitResultsFile = Join-Path $env:ProgramData "BcContainerHelper\Extensions\$containerName\my\results.xml"


        $tests = Get-TestsFromBCContainer `
            -containerName $containerName `
            -credential $credential `
            -testSuite 'SG' `
            -testCodeunitRange '66601..66700' `
            -ignoreGroups

        $first = $true
        $tests | ForEach-Object {
            Run-TestsInBCContainer `
                -containerName $containerName `
                -credential $credential `
                -XUnitResultFileName $xunitResultsFile `
                -AppendToXUnitResultFile:(!$first) `
                -testSuite 'SG' `
                -testCodeunit $_.Id
            $first = $false
        }

        # Dinamik olarak results.xml oluşmasını bekle
        $maxAttempts = 6
        $attempt = 0
        while (-not (Test-Path $xunitResultsFile) -and $attempt -lt $maxAttempts) {
            Write-Host "⌛ Waiting for test results file... (Attempt $($attempt + 1)/$maxAttempts)"
            Start-Sleep -Seconds 30
            $attempt++
        }

        if (Test-Path $xunitResultsFile) {
            Copy-Item -Path $xunitResultsFile -Destination (Join-Path $RepoDir "TestResults.xml") -Force

            [xml]$result = Get-Content (Join-Path $RepoDir "TestResults.xml")
            $failed = $result.testsuite.failures
            if ($failed -gt 0) {
                Write-Host "$failed test(s) failed."
                exit 1
            }
        }
        else {
            Write-Error "❌ XUnit test result file not found after waiting: $xunitResultsFile"
            exit 1
        }



    - name: Publish Test Report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: AL Test Results
        path: TestResults.xml
        reporter: java-junit
        fail-on-error: true
